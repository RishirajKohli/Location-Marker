{"version":3,"sources":["containers/Layout/index.js","containers/App/actions.js","containers/App/constants.js","components/LocationMarker/index.js","containers/MapView/index.js","containers/TableArea/index.js","containers/TableArea/actions.js","containers/TableArea/constants.js","containers/App/index.js","serviceWorker.js","containers/TableArea/sorts.js","containers/TableArea/reducer.js","containers/App/reducer.js","reducer.js","index.js"],"names":["withConnect","connect","state","isThemeLight","app","dispatch","toggleTheme","type","children","console","log","className","htmlFor","id","name","onChange","value","memo","text","table","status","icon","MapMarker","style","color","visibility","tables","tableArea","width","height","bootstrapURLKeys","key","defaultCenter","lat","lng","defaultZoom","map","tableIndex","locations","location","index","addLocationRow","updateLocationRow","toggleSort","addTable","deleteTable","toggleLocationStatus","useState","addRow","setAddRow","editing","setEditing","handleDeleteTable","temp","temp2","handleNewLocationAdd","handleAddNew","event","preventDefault","target","handleUpdate","handlEdit","handleToggleSort","handleLocationStatus","onClick","placeholder","onSubmit","sortByAsc","arrowDownCircle","arrowUpCircle","disabled","required","defaultValue","form","step","min","max","Boolean","window","hostname","match","sortByNameAsc","a","b","nameA","toUpperCase","nameB","sortByNameDesc","initialState","combineReducers","action","push","splice","sort","tempTables","reverse","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ae9b6917.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport \"./layout.scss\";\nimport { toggleTheme } from \"../App/actions\";\nimport { connect } from \"react-redux\";\nfunction Layout({ children, isThemeLight, toggleTheme }) {\n  console.log(children);\n\n  return (\n    <>\n      <header className=\"header\">\n        <h2>Location Marker</h2>\n\n        <div className=\"theme-control\">\n          <label htmlFor=\"select\"> Choose Theme:</label>\n          <select\n            id=\"select\"\n            name=\"select\"\n            onChange={() => {\n              toggleTheme();\n            }}\n          >\n            <option value=\"true\">Light</option>\n            <option value=\"false\">Dark</option>\n          </select>\n        </div>\n      </header>\n      <main\n        className={`main-content ${isThemeLight ? null : \"main-content-dark\"}`}\n      >\n        {children}\n      </main>\n    </>\n  );\n}\nconst mapStateToProps = (state) => {\n  return {\n    isThemeLight: state.app.isThemeLight,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    toggleTheme: () => dispatch(toggleTheme()),\n  };\n};\nconst withConnect = connect(mapStateToProps, mapDispatchToProps)(Layout);\nexport default memo(withConnect);\n","import { TOGGLE_THEME } from \"./constants\";\n\nexport function toggleTheme() {\n  return {\n    type: TOGGLE_THEME,\n  };\n}\n","export const TOGGLE_THEME = \"TOGGLE_THEME\";\n","import React, { memo } from \"react\";\nimport { Icon } from \"@iconify/react\";\nimport MapMarker from \"@iconify/icons-mdi/map-marker\";\nimport \"./locationMarker.scss\";\nconst LocationMarker = ({ text, table, status }) => {\n  return (\n    <div>\n      <Icon\n        icon={MapMarker}\n        style={{\n          color: `rgba(${(195 + table * 30) % 255},${\n            (140 + table * 40) % 255\n          },${(50 + table * 20) % 255})`,\n          visibility: status ? \"visible\" : \"hidden\",\n        }}\n        className=\"pin-icon\"\n      ></Icon>\n      <p>{text}</p>\n    </div>\n  );\n};\nexport default memo(LocationMarker);\n","import React, { memo } from \"react\";\nimport { connect } from \"react-redux\";\nimport GoogleMapReact from \"google-map-react\";\nimport LocationMarker from \"../../components/LocationMarker\";\n\nfunction MapView({ tables }) {\n  return (\n    <div style={{ width: \"100%\", height: \"40vh\" }}>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: \"AIzaSyCKQge0tR5EjVSQWg5zsku4KBw9KYUyc4Y\" }}\n        defaultCenter={{\n          lat: 28.7041,\n          lng: 77.1025,\n        }}\n        defaultZoom={6}\n      >\n        {tables.map((table, tableIndex) => {\n          return table.locations.map((location, index) => {\n            return (\n              // <>\n              //   {location.status && (\n              <LocationMarker\n                table={tableIndex}\n                lat={location.lat}\n                lng={location.lng}\n                text={location.name}\n                status={location.status}\n              ></LocationMarker>\n              //   )}\n              // </>\n            );\n          });\n        })}\n      </GoogleMapReact>\n    </div>\n  );\n}\nconst mapStateToProps = (state) => {\n  return {\n    tables: state.tableArea.tables,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {};\n};\nconst withConnect = connect(mapStateToProps, mapDispatchToProps)(MapView);\nexport default memo(withConnect);\n","import React, { memo, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { InlineIcon } from \"@iconify/react\";\nimport arrowDownCircle from \"@iconify/icons-mdi/arrow-down-circle\";\nimport arrowUpCircle from \"@iconify/icons-mdi/arrow-up-circle\";\n\nimport \"./tableArea.scss\";\nimport {\n  addLocationRow,\n  updateLocationRow,\n  toggleSort,\n  addTable,\n  deleteTable,\n  toggleLocationStatus,\n} from \"./actions\";\n\nfunction TableArea({\n  addLocationRow,\n  updateLocationRow,\n  toggleSort,\n  tables,\n  addTable,\n  deleteTable,\n  toggleLocationStatus,\n  isThemeLight,\n}) {\n  const [addRow, setAddRow] = useState([false]);\n  const [editing, setEditing] = useState([-1]);\n\n  function handleDeleteTable(tableIndex) {\n    return () => {\n      deleteTable(tableIndex);\n      let temp = [...addRow];\n      temp[tableIndex] = false;\n      setAddRow(temp);\n      let temp2 = [...editing];\n      temp2[tableIndex] = -1;\n      setEditing(temp2);\n    };\n  }\n\n  function handleNewLocationAdd(index) {\n    return () => {\n      let temp = [...addRow];\n      temp[index] = true;\n      setAddRow(temp);\n    };\n  }\n  function handleNewLocationCancel(index) {\n    return () => {\n      let temp = [...addRow];\n      temp[index] = false;\n      setAddRow(temp);\n    };\n  }\n  function handleAddNew(tableIndex) {\n    return (event) => {\n      event.preventDefault();\n      let [name, lat, lng] = event.target;\n      addLocationRow(name.value, lat.value, lng.value, tableIndex);\n      let temp = [...addRow];\n      temp[tableIndex] = false;\n      setAddRow(temp);\n    };\n  }\n  function handleUpdate(tableIndex) {\n    return (event) => {\n      event.preventDefault();\n      let [name, lat, lng] = event.target;\n      updateLocationRow(\n        name.value,\n        lat.value,\n        lng.value,\n        editing[tableIndex],\n        tableIndex\n      );\n      let temp = [...editing];\n      temp[tableIndex] = -1;\n      setEditing(temp);\n    };\n  }\n  function handlEdit(index, tableIndex) {\n    return (event) => {\n      event.preventDefault();\n      let temp = [...editing];\n      temp[tableIndex] = index;\n      setEditing(temp);\n    };\n  }\n  function handleToggleSort(tableIndex) {\n    return () => {\n      toggleSort(tableIndex);\n    };\n  }\n  function handleLocationStatus(index, tableIndex) {\n    return () => toggleLocationStatus(index, tableIndex);\n  }\n  return (\n    <>\n      <div className={`add-table ${isThemeLight ? null : \"add-table-dark\"}`}>\n        <button onClick={addTable}> Add new Table</button>\n      </div>\n      {tables.map((table, tableIndex) => {\n        return (\n          <div className=\"table-container\">\n            <div className=\"table-controls\">\n              <input placeholder=\"Enter region\"></input>\n\n              <button onClick={handleDeleteTable(tableIndex)}>\n                Delete Table\n              </button>\n            </div>\n            <form\n              onSubmit={handleAddNew(tableIndex)}\n              id={`add-form-${tableIndex}`}\n            ></form>\n            <form\n              onSubmit={handleUpdate(tableIndex)}\n              id={`update-form-${tableIndex}`}\n            ></form>\n            <table className=\"marker-table\">\n              <thead className=\"marker-table__head\">\n                <tr>\n                  <th>Disabled</th>\n                  <th>\n                    Name\n                    <InlineIcon\n                      icon={table.sortByAsc ? arrowDownCircle : arrowUpCircle}\n                      className=\"sorting-arrow\"\n                      onClick={handleToggleSort(tableIndex)}\n                    ></InlineIcon>\n                  </th>\n                  <th>Latitude/Longitude</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"marker-table__body\">\n                {table.locations.map((location, index) => {\n                  return (\n                    <>\n                      {editing[tableIndex] === index ? (\n                        <tr key={index}>\n                          <td>\n                            <input disabled type=\"checkbox\"></input>\n                          </td>\n                          <td>\n                            <input\n                              required\n                              type=\"text\"\n                              defaultValue={location.name}\n                              form={`update-form-${tableIndex}`}\n                            ></input>\n                          </td>\n                          <td>\n                            <div className=\"coord-controls\">\n                              <input\n                                type=\"number\"\n                                step=\"0.00001\"\n                                min=\"-90\"\n                                max=\"90\"\n                                defaultValue={location.lat}\n                                form={`update-form-${tableIndex}`}\n                              ></input>\n                              <input\n                                type=\"number\"\n                                step=\"0.00001\"\n                                min=\"-180\"\n                                max=\"180\"\n                                defaultValue={location.lng}\n                                form={`update-form-${tableIndex}`}\n                              ></input>\n                            </div>\n                          </td>\n                          <td>\n                            <button\n                              type=\"submit\"\n                              form={`update-form-${tableIndex}`}\n                              className=\"update-button\"\n                            >\n                              Update Location\n                            </button>\n                          </td>\n                        </tr>\n                      ) : (\n                        <tr key={index}>\n                          <td>\n                            <input\n                              type=\"checkbox\"\n                              onChange={handleLocationStatus(index, tableIndex)}\n                            ></input>\n                          </td>\n                          <td>\n                            <span className=\"table-cell\">{location.name}</span>\n                          </td>\n                          <td>\n                            <span className=\"table-cell coords\">\n                              {location.lat}\n                            </span>\n\n                            <span className=\"table-cell coords\">\n                              {location.lng}\n                            </span>\n                          </td>\n                          <td id=\"edit-button\">\n                            <button\n                              onClick={handlEdit(index, tableIndex)}\n                              className=\"edit-button\"\n                            >\n                              Edit\n                            </button>\n                          </td>\n                        </tr>\n                      )}\n                    </>\n                  );\n                })}\n\n                {addRow[tableIndex] ? (\n                  <tr>\n                    <td>\n                      <input disabled type=\"checkbox\"></input>\n                    </td>\n                    <td>\n                      <input\n                        required\n                        type=\"text\"\n                        form={`add-form-${tableIndex}`}\n                      ></input>\n                    </td>\n                    <td>\n                      <div className=\"coord-controls\">\n                        <input\n                          required\n                          type=\"number\"\n                          step=\"0.00001\"\n                          min=\"-90\"\n                          max=\"90\"\n                          form={`add-form-${tableIndex}`}\n                        ></input>\n                        <input\n                          required\n                          type=\"number\"\n                          step=\"0.00001\"\n                          min=\"-180\"\n                          max=\"180\"\n                          form={`add-form-${tableIndex}`}\n                        ></input>\n                      </div>\n                    </td>\n                    <td>\n                      <button\n                        type=\"submit\"\n                        form={`add-form-${tableIndex}`}\n                        className=\"update-button\"\n                      >\n                        Save Location\n                      </button>\n                    </td>\n                  </tr>\n                ) : null}\n              </tbody>\n            </table>\n            <button\n              onClick={\n                addRow[tableIndex]\n                  ? handleNewLocationCancel(tableIndex)\n                  : handleNewLocationAdd(tableIndex)\n              }\n              className=\"add-row-button\"\n            >\n              {addRow[tableIndex] ? \"Cancel\" : \" Add New Location\"}\n            </button>\n          </div>\n        );\n      })}\n    </>\n  );\n}\nconst mapStateToProps = (state) => {\n  return {\n    tables: state.tableArea.tables,\n    isThemeLight: state.app.isThemeLight,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addLocationRow: (name, lat, lng, tableIndex) =>\n      dispatch(addLocationRow(name, lat, lng, tableIndex)),\n    updateLocationRow: (name, lat, lng, index, tableIndex) =>\n      dispatch(updateLocationRow(name, lat, lng, index, tableIndex)),\n    toggleSort: (tableIndex) => dispatch(toggleSort(tableIndex)),\n    addTable: () => dispatch(addTable()),\n    deleteTable: (tableIndex) => dispatch(deleteTable(tableIndex)),\n    toggleLocationStatus: (index, tableIndex) =>\n      dispatch(toggleLocationStatus(index, tableIndex)),\n  };\n};\n\nexport default memo(connect(mapStateToProps, mapDispatchToProps)(TableArea));\n","import {\n  ADD_LOCATION_ROW,\n  UPDATE_LOCATION_ROW,\n  TOGGLE_SORT,\n  ADD_TABLE,\n  DELETE_TABLE,\n  TOGGLE_LOCATION_STATUS,\n} from \"./constants\";\n\nexport function addTable() {\n  return {\n    type: ADD_TABLE,\n  };\n}\nexport function deleteTable(tableIndex) {\n  return {\n    type: DELETE_TABLE,\n    tableIndex,\n  };\n}\nexport function addLocationRow(name, lat, lng, tableIndex) {\n  return {\n    type: ADD_LOCATION_ROW,\n    name,\n    lat,\n    lng,\n    tableIndex,\n  };\n}\nexport function updateLocationRow(name, lat, lng, index, tableIndex) {\n  return {\n    type: UPDATE_LOCATION_ROW,\n    name,\n    lat,\n    lng,\n    index,\n    tableIndex,\n  };\n}\nexport function toggleSort(tableIndex) {\n  return {\n    type: TOGGLE_SORT,\n    tableIndex,\n  };\n}\nexport function toggleLocationStatus(index, tableIndex) {\n  return {\n    type: TOGGLE_LOCATION_STATUS,\n    index,\n    tableIndex,\n  };\n}\n","export const ADD_LOCATION_ROW = \"ADD_LOCATION_ROW\";\nexport const UPDATE_LOCATION_ROW = \"UPDATE_LOCATION_ROW\";\nexport const TOGGLE_SORT = \"TOGGLE_SORT\";\nexport const ADD_TABLE = \"ADD_TABLE\";\nexport const DELETE_TABLE = \"DELETE_TABLE\";\nexport const TOGGLE_LOCATION_STATUS = \"TOGGLE_LOCATION_STATUS\";\n","import React, { memo } from \"react\";\nimport Layout from \"../Layout\";\nimport MapView from \"../MapView\";\nimport TableArea from \"../TableArea\";\nimport \"./app.scss\";\nfunction App() {\n  return (\n    <Layout>\n      <MapView></MapView>\n      <TableArea></TableArea>\n    </Layout>\n  );\n}\n\nexport default memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export function sortByNameAsc(a, b) {\n  var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n  var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n  if (nameA < nameB) {\n    return -1;\n  }\n  if (nameA > nameB) {\n    return 1;\n  }\n\n  // names must be equal\n  return 0;\n}\nexport function sortByNameDesc(a, b) {\n  var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n  var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n  if (nameA < nameB) {\n    return 1;\n  }\n  if (nameA > nameB) {\n    return -1;\n  }\n\n  // names must be equal\n  return 0;\n}\n","import {\n  ADD_LOCATION_ROW,\n  UPDATE_LOCATION_ROW,\n  TOGGLE_SORT,\n  ADD_TABLE,\n  DELETE_TABLE,\n  TOGGLE_LOCATION_STATUS,\n} from \"./constants\";\nimport { sortByNameAsc, sortByNameDesc } from \"./sorts\";\nconst initialState = {\n  tables: [{ locations: [], sortByAsc: true }],\n};\n\nexport function tableArea(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TABLE: {\n      let temp = [...state.tables];\n      temp.push({ locations: [], sortByAsc: true });\n      return { ...state, tables: temp };\n    }\n    case DELETE_TABLE: {\n      let temp = [...state.tables];\n      temp.splice(action.tableIndex, 1);\n      return { ...state, tables: temp };\n    }\n    case ADD_LOCATION_ROW: {\n      let temp = [...state.tables[action.tableIndex].locations];\n      temp.push({\n        name: action.name,\n        lat: action.lat,\n        lng: action.lng,\n        status: true,\n      });\n      temp.sort(\n        state.tables[action.tableIndex].sortByAsc\n          ? sortByNameAsc\n          : sortByNameDesc\n      );\n      let tempTables = [...state.tables];\n      tempTables[action.tableIndex] = {\n        ...tempTables[action.tableIndex],\n        locations: temp,\n      };\n      return { ...state, tables: tempTables };\n    }\n    case UPDATE_LOCATION_ROW: {\n      let temp = [...state.tables[action.tableIndex].locations];\n      temp[action.index] = {\n        ...temp[action.index],\n        name: action.name,\n        lat: action.lat,\n        lng: action.lng,\n      };\n      temp.sort(\n        state.tables[action.tableIndex].sortByAsc\n          ? sortByNameAsc\n          : sortByNameDesc\n      );\n      let tempTables = [...state.tables];\n      tempTables[action.tableIndex] = {\n        ...tempTables[action.tableIndex],\n        locations: temp,\n      };\n      return { ...state, tables: tempTables };\n    }\n    case TOGGLE_SORT: {\n      let sortByAsc = !state.tables[action.tableIndex].sortByAsc;\n\n      let temp = [...state.tables[action.tableIndex].locations];\n      temp.reverse();\n      let tempTables = [...state.tables];\n      tempTables[action.tableIndex] = {\n        ...tempTables[action.tableIndex],\n        locations: temp,\n        sortByAsc,\n      };\n      return { ...state, tables: tempTables };\n    }\n    case TOGGLE_LOCATION_STATUS: {\n      let temp = [...state.tables[action.tableIndex].locations];\n      temp[action.index] = {\n        ...temp[action.index],\n        status: !temp[action.index].status,\n      };\n      let tempTables = [...state.tables];\n      tempTables[action.tableIndex] = {\n        ...tempTables[action.tableIndex],\n        locations: temp,\n      };\n      return { ...state, tables: tempTables };\n    }\n    default:\n      return state;\n  }\n}\n","import { TOGGLE_THEME } from \"./constants\";\n\nconst initialState = {\n  isThemeLight: true,\n};\nexport function app(state = initialState, action) {\n  switch (action.type) {\n    case TOGGLE_THEME: {\n      let isThemeLight = !state.isThemeLight;\n      return { ...state, isThemeLight };\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { tableArea } from \"./containers/TableArea/reducer\";\nimport { app } from \"./containers/App/reducer\";\nexport default combineReducers({\n  app,\n  tableArea,\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./reducer\";\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet sagaMiddleware = createSagaMiddleware();\nlet store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}